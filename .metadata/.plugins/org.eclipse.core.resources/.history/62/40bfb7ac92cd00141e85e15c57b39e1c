package ast.visitor;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

import ast.declaracion.DeclaracionCampo;
import ast.declaracion.DeclaracionFuncion;
import ast.declaracion.DeclaracionStruct;
import ast.declaracion.DeclaracionVariable;
import ast.tipo.TipoArray;
import ast.tipo.TipoChar;
import ast.tipo.TipoEntero;
import ast.tipo.TipoError;
import ast.tipo.TipoReal;
import ast.tipo.TipoStruct;
import error.GestorErrores;

public class IdentificationVisitor extends AbstractVisitor {

	Map<String, DeclaracionStruct> structs = new HashMap<String, DeclaracionStruct>();
	Map<String, DeclaracionFuncion> funciones = new HashMap<String, DeclaracionFuncion>();
	Stack<Map<String, DeclaracionVariable>> contextos = new Stack<Map<String, DeclaracionVariable>>();

	public Object visit(DeclaracionCampo declaracionCampo) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(DeclaracionFuncion declaracionFuncion) {
		if (funciones.get(declaracionFuncion.getNombre()) != null) {
			GestorErrores.addError(new TipoError(declaracionFuncion,
					"Ya existe una funcion con ese nombre"));
		} else {
			funciones.put(declaracionFuncion.getNombre(), declaracionFuncion);
		}

		Object ret = super.visit(declaracionFuncion);
		contextos.s

		return ret;
	}

	public Object visit(DeclaracionStruct declaracionStruct) {
		if (structs.get(declaracionStruct.getNombre()) != null) {
			GestorErrores.addError(new TipoError(declaracionStruct,
					"Ya existe un Struct con ese nombre"));
		} else {
			structs.put(declaracionStruct.getNombre(), declaracionStruct);
		}
		return super.visit(declaracionStruct);
	}

	public Object visit(DeclaracionVariable declaracionVariable) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(TipoArray tipoArray) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(TipoChar tipoChar) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(TipoEntero tipoEntero) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(TipoError tipoError) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(TipoReal tipoReal) {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(TipoStruct tipoStruct) {
		// TODO Auto-generated method stub
		return null;
	}

	private void set() {
		contextos.push(new HashMap<String, DeclaracionVariable>());
	}

	private void reset() {
		contextos.pop();
	}

	private DeclaracionVariable getVariable(String nombreVariable) {
		return contextos.peek().get(nombreVariable);
	}

	private void putVariable(String nombreVariable, DeclaracionVariable node) {
		contextos.peek().put(nombreVariable, node);
	}

}
