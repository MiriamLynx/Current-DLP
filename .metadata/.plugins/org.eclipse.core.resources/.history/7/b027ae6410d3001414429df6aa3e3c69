%{
import ast.*;
import ast.declaracion.*;
import ast.expresion.*;
import ast.sentencia.*;
import ast.tipo.*;
import java.util.List;
import java.util.ArrayList;
%}


%token CTE_ENTERA
%token CTE_REAL
%token CTE_CHAR
%token INTEGER
%token REAL
%token CHARACTER
%token IDENT
%token PRINT
%token IF
%token ELSE
%token WHILE
%token VOID
%token RETURN
%token MAYORIGUAL
%token MENORIGUAL
%token IGUAL
%token DO
%token END
%token THEN
%token READ
%token AS
%token DIM
%token AND
%token OR
%token NOT
%token DISTINTO
%token CTYPE
%token FUNCTION
%token PROC
%token TYPE

%right '='
%left AND OR NOT
%left '>' MAYORIGUAL '<' MENORIGUAL IGUAL DISTINTO
%left '+' '-'
%left '*' '/' '%'
%nonassoc '[' ']'
%nonassoc '(' ')'
%nonassoc '.'

%%

// * Programa
programa: listaDeclaraciones {root = new Programa(lexico.getLinea(), lexico.getColumna(), (List<Declaracion>)$1);}
;

// * Cero o más declaraciones
listaDeclaraciones: { $$ = new ArrayList<Declaracion>(); } 
|listaDeclaraciones declaracion	{ List<Declaracion> l = (List<Declaracion>)$1; l.add((Declaracion)$2); $$ = l;}
;


// * Declaracion
declaracion: declaracionVariable {$$ = $1;	}
|declaracionFuncion {$$ = $1;	}
|declaracionProcedimiento {$$ = $1;	}
|declaracionStruct {$$ = $1;	}
;


// * Declaracion de funcion
declaracionFuncion: FUNCTION IDENT '(' parametrosFuncion ')' AS tipo listaDeclaracionesVariable listaSentencias END FUNCTION ';' {$$ = new DeclaracionFuncion(lexico.getLinea(), lexico.getColumna(), (Tipo)$7, (String)$2, (List<DeclaracionVariable>)$4, (List<DeclaracionVariable>)$8, (List<Sentencia>)$9); }
;

// * Declaracion de struct
declaracionStruct: TYPE IDENT listaDeclaracionesCampo END TYPE ';' {$$ = new DeclaracionStruct(lexico.getLinea(), lexico.getColumna(), (String)$2, (List<DeclaracionVariable>)$3); }
;

// * Declaracion de procedimiento
declaracionProcedimiento: PROC IDENT '(' parametrosFuncion ')' listaDeclaracionesVariable listaSentencias END PROC ';' {$$ = new DeclaracionFuncion(lexico.getLinea(), lexico.getColumna(), null, (String)$2,(List<DeclaracionVariable>)$4, (List<DeclaracionVariable>)$6, (List<Sentencia>)$7); }
;

// * Declaracion de variable
declaracionVariable: DIM IDENT AS tipo ';' {$$ = new DeclaracionVariable(lexico.getLinea(), lexico.getColumna(),(Tipo)$4, (String)$2); }
| DIM IDENT listaDimensiones AS tipo ';' { Tipo array = new TipoArray(lexico.getLinea(), lexico.getColumna(), (List<Integer>)$3, (Tipo)$5); $$ = new DeclaracionVariable(lexico.getLinea(), lexico.getColumna(), array, (String)$2);}
;

// * Declaracion de campo
declaracionCampo: IDENT AS tipo ';' {$$ = new DeclaracionCampo(lexico.getLinea(), lexico.getColumna(),(Tipo)$3, (String)$1); }
| IDENT listaDimensiones AS tipo ';' {Tipo array = new TipoArray(lexico.getLinea(), lexico.getColumna(), (List<Integer>)$2, (Tipo)$4); $$ = new DeclaracionCampo(lexico.getLinea(), lexico.getColumna(), array, (String)$1);}
;

// * Una o más dimensiones de array
listaDimensiones: '[' CTE_ENTERA ']' { List<Integer> l = new ArrayList<Integer>(); l.add((Integer)$2); $$ = l;}
| listaDimensiones '[' CTE_ENTERA ']' { List<Integer> l  = (List<Integer>)$1; l.add((Integer)$3); $$ = l;}
;

// * Cero o más declaraciones de variable
listaDeclaracionesVariable: {$$ = new ArrayList<DeclaracionVariable>(); }
|listaDeclaracionesVariable declaracionVariable {List<DeclaracionVariable> l = (List<DeclaracionVariable>)$1; l.add((DeclaracionVariable)$2); $$ = l;}
;

// * Cero o más declaraciones de campo
listaDeclaracionesCampo: {$$ = new ArrayList<DeclaracionCampo>(); }
|listaDeclaracionesCampo declaracionCampo {List<DeclaracionCampo> l = (List<DeclaracionCampo>)$1; l.add((DeclaracionCampo)$2); $$ = l;}
;


// * Cero o más sentencias
listaSentencias: {$$ = new ArrayList<Sentencia>();	}
|listaSentencias sentencia {List<Sentencia> l = (List<Sentencia>)$1; l.add((Sentencia)$2); $$ = l; }
;

/// * Sentencias
sentencia: PRINT expresion ';' {$$ = new Print(lexico.getLinea(), lexico.getColumna(),(Expresion)$2);	}
| WHILE expresion DO listaSentencias END WHILE ';' {$$ = new While(lexico.getLinea(), lexico.getColumna(),(Expresion)$2,(List<Sentencia>)$4);	}
|IF expresion THEN listaSentencias ELSE listaSentencias END IF ';' {$$ = new If(lexico.getLinea(), lexico.getColumna(),(Expresion)$2, (List<Sentencia>)$4, (List<Sentencia>)$6);	}
|IF expresion THEN listaSentencias END IF ';' {$$ = new If(lexico.getLinea(), lexico.getColumna(),(Expresion)$2, (List<Sentencia>)$4, new ArrayList<Sentencia>());	}
|RETURN expresion ';' {$$ = new Return(lexico.getLinea(), lexico.getColumna(),(Expresion)$2);	}
|RETURN ';' {$$ = new Return(lexico.getLinea(), lexico.getColumna(),null);	}
|IDENT '(' parametrosLlamada ')' ';' {$$ = new LlamadaFuncionSent(lexico.getLinea(), lexico.getColumna(),(String)$1, (List<Expresion>)$3);	}
|READ expresion ';' {$$ = new Read(lexico.getLinea(), lexico.getColumna(),(Expresion)$2);	}
|expresion '=' expresion ';' {$$ = new Asignacion(lexico.getLinea(), lexico.getColumna(),(Expresion)$1, (Expresion)$3);	}
;

// * Cero o más parametros (llamada a funcion) con separadores
parametrosLlamada: {$$ = new ArrayList<Expresion>();	}
|parametroLlamada {$$ = $1;}
;
parametroLlamada: expresion {$$ = new ArrayList<Expresion>(); ((List<Expresion>)$$).add((Expresion)$1);	}
| parametroLlamada ',' expresion {List<Expresion> l = (List<Expresion>)$1; l.add((Expresion)$3); $$ = l;	}
;

// * Cero o más parametros (declaracion de funcion) con separadores
parametrosFuncion: {$$ = new ArrayList<DeclaracionVariable>();	}
|parametroFuncion {$$ = $1;}
;
parametroFuncion: IDENT AS tipo {$$ = new ArrayList<DeclaracionVariable>(); ((List<DeclaracionVariable>)$$).add(new DeclaracionVariable(lexico.getLinea(), lexico.getColumna(), (Tipo)$3,(String)$1));	}
| parametroFuncion ',' IDENT AS tipo {List<DeclaracionVariable> l = (List<DeclaracionVariable>)$1; l.add(new DeclaracionVariable(lexico.getLinea(), lexico.getColumna(),(Tipo)$5,(String)$3)); $$ = l;	}
;

//	* Expresiones
expresion: CTE_ENTERA {$$ = new ConstanteEntera(lexico.getLinea(), lexico.getColumna(),(Integer)$1);	}
|CTE_CHAR {$$ = new ConstanteChar(lexico.getLinea(), lexico.getColumna(),(Character)$1);	}
|CTE_REAL {$$ = new ConstanteReal(lexico.getLinea(), lexico.getColumna(),(Double)$1);	}
|expresion '+' expresion {$$ = new OperacionAritmetica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "+", (Expresion)$3);	}
|expresion '-' expresion {$$ = new OperacionAritmetica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "-", (Expresion)$3);	}
|expresion '*' expresion {$$ = new OperacionAritmetica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "*", (Expresion)$3);	}
|expresion '/' expresion {$$ = new OperacionAritmetica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "/", (Expresion)$3);	}
|expresion '>' expresion {$$ = new Comparacion(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, ">", (Expresion)$3);	}
|expresion '<' expresion {$$ = new Comparacion(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "<", (Expresion)$3);	}
|expresion MAYORIGUAL expresion {$$ = new Comparacion(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, ">=", (Expresion)$3);	}
|expresion MENORIGUAL expresion {$$ = new Comparacion(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "<=", (Expresion)$3);	}
|expresion AND expresion {$$ = new OperacionLogica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "&&", (Expresion)$3);	}
|expresion OR expresion {$$ = new OperacionLogica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "||", (Expresion)$3);	}
|expresion DISTINTO expresion {$$ = new OperacionLogica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "<>", (Expresion)$3);	}
|expresion IGUAL expresion {$$ = new OperacionLogica(lexico.getLinea(), lexico.getColumna(), (Expresion)$1, "==", (Expresion)$3);	}
|expresion '[' expresion ']' {$$ = new AccesoArray(lexico.getLinea(), lexico.getColumna(),(Expresion)$1,(Expresion)$3);	}
|expresion '.' IDENT {$$ = new AccesoCampo(lexico.getLinea(), lexico.getColumna(),(Expresion)$1,(String)$3);	}
|'(' expresion ')' {$$ = (Expresion)$2;	}
|IDENT '(' parametrosLlamada ')' {$$ = new LlamadaFuncion(lexico.getLinea(), lexico.getColumna(), (String)$1, (List<Expresion>)$3);	}
|CTYPE '(' tipo ',' expresion ')' {$$ = new Cast(lexico.getLinea(), lexico.getColumna(), (Tipo)$3, (Expresion)$5);	}
|IDENT {$$ = new Variable(lexico.getLinea(), lexico.getColumna(), (String)$1); }
|NOT expresion {$$ = new NotLogico(lexico.getLinea(), lexico.getColumna(), (Expresion)$2);}
;

//	* Tipos
tipo: INTEGER {$$ = TipoEntero.getInstance(lexico.getLinea(), lexico.getColumna());}
| CHARACTER {$$ = TipoChar.getInstance(lexico.getLinea(), lexico.getColumna());} 
| REAL {$$ = TipoReal.getInstance(lexico.getLinea(), lexico.getColumna());}
| IDENT {$$ = new TipoStruct(lexico.getLinea(), lexico.getColumna(), (String)$1);}

%%
Lexico lexico;
AST root;
int token;

// * Manejo de Errores Sintácticos
public void yyerror (String error) {
    System.out.println ("Error Sintáctico en línea " + lexico.getLinea()+
		" y columna "+lexico.getColumna()+":\t"+error);
}

// * Llamada al analizador léxico
private int yylex () {
    int token=0;
    try { 
	token=lexico.yylex(); 
    } catch(Throwable e) {
	    System.out.println ("Error Léxico en línea " + lexico.getLinea()+
		" y columna "+lexico.getColumna()+":\t"+e); 
    }
    return token;
}

// * El yylval no es un atributo público
public Object getYylval() {
    	return yylval;
}
public void setYylval(Object yylval) {
        this.yylval = yylval;
}

// * Constructor del Sintáctico
public Parser(Lexico lexico) {
	this.lexico = lexico;
	lexico.setParser(this);
}

public AST getAst(){
	return root;
}