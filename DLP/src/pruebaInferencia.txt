/*
Test para probar la Fase de Inferencia.

COMPROBACION: El compilador del alumno debe detectar todos los errores indicados en los comentarios.

ADVERTENCIA: Hay algunos errores que producen otros errores derivados.

Por ejemplo:

	print juan + anton;	// suma de dos estructuras 

Lo anterior produce el error de que se están sumando dos expresiones de tipos no simples y además
puede producir el error de que la expresión a imprimir tampoco es de tipo simple (al no quedar
un tipo simple asociado a la suma al no haberse podido calcular su tipo).
Estos errores derivados son normales y no es necesario intentar suprimirlos. 

NOTA: Es posible que el alumno deba adaptar ligeramente la sintaxis del lenguaje si no coincide
con la del lenguaje que le corresponde.
*/


type Persona 
	edad as integer;
	meses[12] as integer;
end type;

dim juan as Persona;
dim anton as Persona;

function g () as Persona //Error: Retorno de tipo no simple
end function;

function x() as integer //Error: retorna entero y no tiene expresiones de retorno
end function;

function h () as integer 
 return 5.6;	// Tipo de retorno no coincide
end function;

function j (a as integer, b as real) as real
	h(2);	// Numero de argumentos incorrecto
	return; // Debe haber un valor de retorno
end function;

function k (p as integer, w as Persona) as integer  //Debería dar error w y no p al no ser de tipo simple
 dim i as integer; 
 	while i do
		if i then
			while i do
				return i;
			end while;
		end if;
	end while;
	while i do
		if i then
			while i do
				return 2.5; //Error porque devuelve entero
			end while;
		end if;
	end while;
end function;

proc n (maria as Persona) //Parametros han de ser de tipo simple
 return 2.5; //No debe tener return ya que es void
end proc;

function m() as integer //Entre sus sentencias no hay un return
	dim i as integer;
	dim f as real;
	dim v[10] as integer;
	dim w[10][20] as integer;
	dim y[10][20][30] as integer;
	if i then end if;
	while i do end while;
end function;

function o() as integer //No debería dar error ya que tiene un return interior
	dim i as integer;
	while i do
		if i then
			while i do
				return i;
			end while;
		end if;
	end while;
end function;


proc main()

	dim i as integer;
	dim f as real;
	dim v[10] as integer;
	dim w[10][20] as integer;
	dim y[10][20][30] as integer;
	
	
	if 2.5 then end if; // La condicion debe ser de tipo entero
	if i then end if;
	
	while juan do end while;	// La condicion debe ser de tipo entero
	while i do end while;
	while i do
		if i then
			while i do
				return 4; // error porque no puede devolver nada
			end while;
		end if;
	end while;
	
	5 = 6; // Valor de la izquierda no modificable
	i = f; // Valores de distinto tipo
	juan = anton; // Valor de la izquierda debe ser simple

	read juan;	// Debe ser un tipo simple
	read 35;	// Debe ser modificable
	read i;
	
	print juan; // Debe ser tipo simple
	print f / 2.5;
	j(12, 12,5);//no coinciden
	j(12, 12); // Tipo de los parámetros no coincide
	j(12);		// Número de argumentos no coincide
	j(12, 12.5, 4); // Número de argumentos no coincide
	
	print main();	// No tiene tipo de retorno
	print j(12, 12.5);
	print j(12, 12); // Tipo de los parámetros no coincide
	print j(12);		// Número de argumentos no coincide
	print j(12, 12.5, 4); // Número de argumentos no coincide

	print juan + anton;	// Deben ser tipos simples
	print 2.5 * 2;		// Deben ser del mismo tipo
	print i - 2;

	print 2.5 and f;	// Deben ser tipo entero
	print 2 or i;
	
	print juan > anton;	// Deben ser tipos simples
	print 2.5 < 2;		// Deben ser del mismo tipo
	print i == 2;
	print i <> 2;
	
	print ctype(integer,(2.5) + i); // Los operandos deben de ser del mismo tipo
	print ctype(integer,2.5 + 3.1); 
	print ctype(Persona,2.5);	// Tipos simples
	print ctype(integer, juan);		// Expresiones de tipos simples
	print ctype(real,2.5);	// Deben ser distintos tipos
	
	print juan[5];	// Debe ser tipo array
	print 2[5];	// Debe ser tipo array
	print v[5.0];	// Debe ser indice entero
	print v[i+2];
	print w[i+2][i];
	print y[i+2][i][i*3];
	
	print y[88][180];//Error y tiene tres dimensiones
	print y; //Error y tiene tres dimensiones
	
	print juan.meses; //Error meses tiene una dimensión
	print juan.meses[0][3]; //Error meses tiene una dimensión
	print juan.meses[3];
	
	print juan.edad;
	print i.edad;	// Se requiere tipo struct
	print juan.nombre; // Campo no definido
	
end proc;

